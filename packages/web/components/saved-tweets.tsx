/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/3nqHduFDcGM
 */
import { Input } from "@/components/ui/input";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar";
import { Label } from "@/components/ui/label";
import { client } from "@/lib/hc";
import { unstable_noStore as noStore } from "next/cache";
import { P, match } from "ts-pattern";
import { Suspense } from "react";
import { SavedTweetsSkeleton } from "./saved-tweets-skeleton";
import { SavedTweetFilters } from "./saved-tweet-filters";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "./ui/pagination";
import { usePathname } from "next/navigation";
import { SavedTweetPaginationFooter } from "./saved-tweet-pagination-footer";
import { ErrorBoundary } from "react-error-boundary";
type Chunk = {
  content: string;
  embedding: number[];
  tweetId?: string | null | undefined;
  metadata?: any;
  _id: string;
};

type Tweet = {
  tweetId: string;
  author_username: string;
  createdAt: string;
  chunks: Array<string>;
  isThread?: boolean | null | undefined;
  threadId?: string | null | undefined;
  replyToTweetId?: string | null | undefined;
  _id: string;
};
function TweetChunkItem({
  chunk,
}: {
  chunk: {
    content: string;
    embedding: number[];
    tweetId?: string | null | undefined;
    metadata?: any;
    _id: string;
    score: number;
    tweet: Tweet;
    chunks: Chunk[];
  };
}) {
  return (
    <div className="flex items-start gap-4">
      {/* Avatar Section (no changes needed) */}
      <div className="flex-shrink-0">
        <Avatar className="w-12 h-12">
          <AvatarImage alt="@johndoe" src="/placeholder-avatar.jpg" />
          <AvatarFallback>AC</AvatarFallback>
        </Avatar>
      </div>

      {/* Tweet Content Section (improved styles) */}
      <div className="border rounded-lg p-4 w-full bg-white dark:bg-zinc-900">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-lg font-medium">{chunk.tweet.author_username}</p>
            <p className="text-gray-600 dark:text-gray-400">
              @{chunk.tweet.author_username}
            </p>
          </div>
            {/* score */}
            <span className="inline-block rounded-md px-2 py-1 text-xs font-semibold bg-gray-100 text-gray-800 dark:bg-gray-300 dark:text-gray-900">
              Score: {chunk.score.toFixed(2)}
            </span>
        </div>

        <p>
          {chunk.chunks.map((chunk_part, index) => (
            <span
              key={index}
              className={`
                inline-block
                rounded-md
                px-2 py-1
                ${
                  chunk._id === chunk_part._id
                    ? "bg-yellow-100 text-gray-800 font-semibold dark:bg-yellow-300 dark:text-gray-900"
                    : "dark:text-gray-300"
                }
              `}
            >
              {chunk_part.content}
              {index !== chunk.chunks.length - 1 && <br />}
            </span>
          ))}
        </p>
      </div>
    </div>
  );
}

function ErrorCard() {
  return (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative text-center">
      <strong className="font-bold">
        An unexpected error occurred while processing your request. You can try
          changing your search term or contact support.
      </strong>
    </div>
  );
}

async function SavedTweetResults({
  params,
}: {
  params: { search?: string; page?: number; limit?: number };
}) {
  noStore();

  const res = await client.tweet.v1.embeddings.$get({
    query: {
      limit: String(params.limit || 10),
      search: params.search!,
      // ...(params.search ? { author_username: `$like:${params.search}` } : {}),
    },
  });

  const data = await res.json();

  return match(data)
    .with(
      {
        data: P.nonNullable,
      },
      ({ data }) => {
        return Array.isArray(data) && data.length > 0 ? (
          <div className="flex flex-col gap-4">
            {data.map((chunk) => (
              <TweetChunkItem key={chunk._id} chunk={chunk} />
            ))}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center">
            <div className="w-full max-w-5xl">
              <div className="flex flex-col items-center justify-center gap-2 text-center">
                <h1 className="text-2xl text-center font-semibold mb-4">
                  No results found
                </h1>
                <p className="text-xl text-muted-foreground sm:text-2xl">
                  Try a different search term.
                </p>
              </div>
            </div>
          </div>
        );
      }
    )
    .with(
      {
        error: P.nonNullable,
      },
      ({ error }) => {
        return (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative text-center">
            <strong className="font-bold">
              An error occurred while processing your request. You can try
              changing your search term or contact support.
            </strong>
          </div>
        );
      }
    )
    .exhaustive();
}

function createUniqueKeyFromParams(params: {
  search?: string;
  page?: number;
  limit?: number;
}) {
  const defaultKey = "default-saved-tweets-list";
  const defaultPage = 1;
  const defaultLimit = 10;
  return `${params.search || defaultKey}-${params.page || defaultPage}-${
    params.limit || defaultLimit
  }`;
}

export function SavedTweets({
  params,
}: {
  params: { search?: string; page?: number; limit?: number };
}) {
  return (
    <section key="1" className="flex flex-1 flex-col gap-4 p-6">
      <div className="flex items-center justify-between flex-col">
        <h1 className="text-2xl text-center font-semibold mb-4">
          Tweets Saved&nbsp;
          {/* Sparkles emoji */}AI&nbsp;
          <span role="img" aria-label="sparkles">
            âœ¨
          </span>
        </h1>
        <p className="text-center text-sm text-muted-foreground">
          These are the tweets you have saved in your collection.
        </p>
      </div>
      <SavedTweetFilters />
      <div className="border rounded-lg p-6 flex flex-col gap-6">
        <ErrorBoundary
        fallback={<ErrorCard />}
        >

        <Suspense
          fallback={<SavedTweetsSkeleton />}
          // This is a hack to make the component re-render the fallback when the search param changes,
          // otherwise the fallback will not re-render when the search param changes (this works perfectly fine but doesn't give any feedback to the user)
          key={createUniqueKeyFromParams(params)}
        >
          <SavedTweetResults params={params} />
        </Suspense>
        </ErrorBoundary>
        <div className="grid grid-cols-1 gap-4"></div>
        {/* <div className="border-t pt-4">
          <h2 className="text-lg font-semibold mb-2">Add tweet</h2>
          <p className="text-sm text-gray-600 mb-4">
            Add a new tweet to your collection.
          </p>
          <div className="flex flex-col space-y-4">
            <div>
              <Label htmlFor="tweet-url">URL</Label>
              <Input
                id="tweet-url"
                placeholder="Add a link to your website, blog, or social media profile."
              />
            </div>
            <div className="flex space-x-2">
              <Button>Add tweet</Button>
              <Button variant="outline">Reset form</Button>
            </div>
          </div>
        </div> */}
      </div>
    </section>
  );
}
